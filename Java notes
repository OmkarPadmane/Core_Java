üìå *Daily Tech Tips*

*Day 5: Features of Java*
- *Simple* - Java is very easy to learn, and its syntax is simple, clean and easy to understand.
- *Object Oriented* - Java is an object-oriented programming language. Everything in Java is an object.
- *Portable* - Java platform-independent bytecode can be taken to any platform for execution makes java portable.
- *Secure* - No explicit pointers, java programs run in an environment that is independent of the os environment which makes java programs more secure.
- *Robust* - Strong memory management, lack of pointers, automatic garbage collection, exception handling and the type checking mechanism in Java makes java robust. 
- *Platform Independent* - Java is platform independent because it is a write once, run anywhere language.

--- Java Version Overview

*1.	Java 1.0 (January 23, 1996):*
o Initial release of Java by Sun Microsystems.
o	Introduced key concepts such as platform independence, security, and portability.

*2.	Java 1.2 (Java 2) (December 8, 1998):*
o	Introduced the Swing GUI toolkit, enhancing graphical user interface development.
o	Enhanced performance and stability.

*3.	Java 5 (September 30, 2004):*
o	Introduced generics, enabling stronger type checking at compile time.
o	Added metadata annotations for easier code organization.
o	Introduced enhanced for loop for iterating over collections.

*4.	Java 8 (March 18, 2014):*
o	Introduced Lambda expressions, enabling functional programming paradigms.
o	Added the Stream API for processing collections of data in a functional style.
o	Introduced the java.time package for improved date and time handling.

*5.	Java 11 (September 25, 2018):*
o	Introduced the module system (Project Jigsaw) for modular programming.
o	Removed deprecated APIs and features.
o	Long-term support (LTS) release with updates and bug fixes for a longer duration.

*6.	Java 14 (March 17, 2020):*
o	Introduced switch expressions to enhance the switch statement.
o	Added records to provide a compact syntax for declaring classes.

*7.	Java 17 (September 14, 2021):*
o	Introduced sealed classes and interfaces to restrict the subclasses of a class or the implementors of an interface.
o	Added pattern matching for the instanceof operator to simplify type casting.

*8.	Java 21 (September 19, 2023):*
o	Introduced unnamed classes, allows for a barebones Main class without boilerplate code
o Introduced String Template‚Äô features that allows to mix the expression and code together
o	introduced virtual threads to do tasks quickly without allocating much resources and space in the memory.



--- What is JVM?*

o JVM stands for *Java Virtual Machine*. It is an abstract computing machine that enables a computer to *run Java programs*. 

o The JVM performs all the tasks necessary for *running a Java application, including loading, verifying, and executing code*.  

o It also *handles garbage collection and provides a runtime environment*. 

o The *key parts* of the JVM are the *Class Loader, Memory Area, Execution Engine, and the Garbage Collector.*




---What is JRE?*

- JRE stands for *Java Runtime Environment.*
- It is the implementation of JVM (Java Virtual Machine) and it is specially designed to *provide an environment to execute Java programs*.
- It is also platform dependent like JDK. 
- It *consists of JVM, Java binaries, and other classes* for the smooth execution of the program. 
- It *doesn‚Äôt contain any development tools like a compiler, debugger, etc.* If we only want to execute a program, we just need to install JRE and not JDK, since there is no development or compilation of the code required.


--- What is JDK?*

- The *Java Development Kit (JDK)* is a *development environment* for building applications, applets, and components using the Java programming language.
- It includes *tools useful for developing and testing programs* written in the Java programming language and running on the Java platform.
- It has a *private Java Virtual Machine (JVM)* and a few other resources necessary for the development of a Java Application.
- JDK contains:
          - Java Runtime Environment (JRE),
          - An interpreter/loader (Java),
          - A compiler (javac),
          - An archiver (jar) and many more.



--- Features of Java*

- *Simple* - Java is very easy to learn, and its syntax is simple, clean and easy to understand.

- *Object Oriented* - Java is an object-oriented programming language. Everything in Java is an object.

- *Portable* - Java platform-independent bytecode can be taken to any platform for execution makes java portable.

- *Secure* - No explicit pointers, java programs run in an environment that is independent of the os environment which makes java programs more secure.

- *Robust* - Strong memory management, lack of pointers, automatic garbage collection, exception handling and the type checking mechanism in Java makes java robust. 

- *Platform Independent* - Java is platform independent because it is a write once, run anywhere 

*Architecture Neutral* - Java is architecture neutral because there are no implementation dependent features, for example, the size of primitive types is fixed.

*High Performance* -  Java is faster than other traditional interpreted programming languages because Java bytecode is "close" to native code.

*Distributed* - Java is distributed because it facilitates users to create distributed applications in Java. RMI and EJB are used for creating distributed applications.

*Multithreading* -  Java supports multithreading. It is a Java feature that allows concurrent execution of two or more parts of a program for maximum utilization of the CPU.

*Interpreted* - Java integrates arising enormous power as Java compiler compiles the source code to bytecode and JVM  executes this bytecode to machine OS-dependent executable code.

*Dynamic* - It means classes are loaded on demand. Java supports dynamic compilation and automatic memory management (garbage collection).

--- Object class in Java*
- Object class is the root of the class hierarchy. 
- Every class in Java is a descendant, either directly or indirectly, of the Object class, means Object is the ultimate superclass for all other classes. 
- The Object class provides a set of methods that are available to all objects in Java.
- Methods of the Object class can be overridden in derived classes to provide specific behavior.

--- What is the difference between == and equals() method?*

In Java, == and equals() are used for comparison, but they serve different purposes and oprate differently.

== : 
    For primitive data types, == checks if the values are identical or not.
    For object references ==         checks if both references point to the same object in memory or not.

Equals() : Used to compare the contents or states of two objects for equality.

Example: 
String s1=new String(‚ÄúHello‚Äù); 
String s2=new String(‚ÄúHello‚Äù);

s1 == s2 returns false, because they are different objects.

s1.equals(s2) returns true, because their content is the same.